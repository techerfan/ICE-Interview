// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go
//
// Generated by this command:
//
//	mockgen -source=./service.go -destination=../../mocks/productservice_cache_mock/productservice_cache.go -package=productservicecache .
//

// Package productservicecache is a generated GoMock package.
package productservicecache

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCachRepository is a mock of CachRepository interface.
type MockCachRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCachRepositoryMockRecorder
}

// MockCachRepositoryMockRecorder is the mock recorder for MockCachRepository.
type MockCachRepositoryMockRecorder struct {
	mock *MockCachRepository
}

// NewMockCachRepository creates a new mock instance.
func NewMockCachRepository(ctrl *gomock.Controller) *MockCachRepository {
	mock := &MockCachRepository{ctrl: ctrl}
	mock.recorder = &MockCachRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCachRepository) EXPECT() *MockCachRepositoryMockRecorder {
	return m.recorder
}

// DeleteProduct mocks base method.
func (m *MockCachRepository) DeleteProduct(ctx context.Context, productName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, productName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockCachRepositoryMockRecorder) DeleteProduct(ctx, productName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockCachRepository)(nil).DeleteProduct), ctx, productName)
}

// GetProduct mocks base method.
func (m *MockCachRepository) GetProduct(ctx context.Context, productName string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, productName)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockCachRepositoryMockRecorder) GetProduct(ctx, productName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockCachRepository)(nil).GetProduct), ctx, productName)
}

// SetProduct mocks base method.
func (m *MockCachRepository) SetProduct(ctx context.Context, productName string, cost float64, expTime time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProduct", ctx, productName, cost, expTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProduct indicates an expected call of SetProduct.
func (mr *MockCachRepositoryMockRecorder) SetProduct(ctx, productName, cost, expTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProduct", reflect.TypeOf((*MockCachRepository)(nil).SetProduct), ctx, productName, cost, expTime)
}
